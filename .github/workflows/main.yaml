name: Release application

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'todoapp/todo-app/**'
      - 'todoapp/todo-backend/**'
      - 'todoapp/broadcaster/**'
      - 'log_output/log_output_api/**'
      - '.github/workflows/**'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  REGISTRY: europe-north1-docker.pkg.dev
  REPOSITORY: my-repo
  CONFIG_REPO: usmanbala12/dwk-project-config
  CONFIG_REPO_URL: https://github.com/usmanbala12/dwk-project-config.git

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      todo-app: ${{ steps.filter.outputs.todo-app }}
      todo-backend: ${{ steps.filter.outputs.todo-backend }}
      log-output: ${{ steps.filter.outputs.log-output }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            todo-app:
              - 'todoapp/todo-app/**'
              - 'todoapp/manifests/deployment-app.yaml'
            todo-backend:
              - 'todoapp/todo-backend/**'
              - 'todoapp/manifests/deployment-backend.yaml'
            broadcaster:
              - 'todoapp/broadcaster/**'
            log-output:
              - 'log_output/log_output_api/**'
            

  
  build-log-output:
    name: Build and Push log-output
    needs: detect-changes
    if: needs.detect-changes.outputs.log-output == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: 'Build and Push log-output'
        run: |
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/log-output:${{ env.BRANCH }}-${{ github.sha }}
          docker build --tag $IMAGE_TAG ./log_output/log_output_api
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Use right image
        run: |
          cd ./log_output
          kustomize edit set image PROJECT/IMAGE=$IMAGE_TAG

      - name: commit kustomization.yaml to GitHub
        uses: EndBug/add-and-commit@v9
        with:
          add: './log_output/kustomization.yaml'
          message: New version released ${{ github.sha }}

  build-todo-app:
    name: Build and Deploy Todo App
    needs: detect-changes
    if: needs.detect-changes.outputs.todo-app == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Determine Image Tag and Target Overlay
        id: tag_vars
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Production: Use version tag (e.g., v1.0.0)
            IMAGE_TAG_NAME="${{ github.ref_name }}"
            TARGET_OVERLAY="prod"
          else
            # Staging: Use branch-sha (e.g., main-abcdef12)
            IMAGE_TAG_NAME="${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-8)"
            TARGET_OVERLAY="staging"
          fi
          echo "IMAGE_TAG_NAME=$IMAGE_TAG_NAME" >> $GITHUB_ENV
          echo "TARGET_OVERLAY=$TARGET_OVERLAY" >> $GITHUB_ENV
          echo "Using tag: $IMAGE_TAG_NAME for $TARGET_OVERLAY"
          
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: 'Build and Push Todo App'
        run: |
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/todo-app:${{ env.IMAGE_TAG_NAME }}
          docker build --tag $IMAGE_TAG ./todo-app
          docker push $IMAGE_TAG

      # Checkout the config repository
      - name: Checkout Config Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONFIG_REPO }}
          token: ${{ secrets.CONFIG_REPO_PAT }}
          path: config-repo

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Update Config Repository with New Image
        run: |
          cd config-repo/overlays/${{ env.TARGET_OVERLAY }}
          kustomize edit set image todoapp=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/todo-app:${{ env.IMAGE_TAG_NAME }}
          cat kustomization.yaml

      - name: Commit and Push to Config Repository
        run: |
          cd config-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add overlays/${{ env.TARGET_OVERLAY }}/kustomization.yaml
          git commit -m "chore(todo-app): Update image to ${{ env.IMAGE_TAG_NAME }} in ${{ env.TARGET_OVERLAY }}"
          git push

  build-todo-backend:
    name: Build and Deploy Todo Backend
    needs: detect-changes
    if: needs.detect-changes.outputs.todo-backend == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Determine Image Tag and Target Overlay
        id: tag_vars
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG_NAME="${{ github.ref_name }}"
            TARGET_OVERLAY="prod"
          else
            IMAGE_TAG_NAME="${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-8)"
            TARGET_OVERLAY="staging"
          fi
          echo "IMAGE_TAG_NAME=$IMAGE_TAG_NAME" >> $GITHUB_ENV
          echo "TARGET_OVERLAY=$TARGET_OVERLAY" >> $GITHUB_ENV
          echo "Using tag: $IMAGE_TAG_NAME for $TARGET_OVERLAY"

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: 'Build and Push Todo Backend'
        run: |
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/todo-backend:${{ env.IMAGE_TAG_NAME }}
          docker build --tag $IMAGE_TAG ./todo-backend
          docker push $IMAGE_TAG

      - name: Checkout Config Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONFIG_REPO }}
          token: ${{ secrets.CONFIG_REPO_PAT }}
          path: config-repo

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Update Config Repository with New Image
        run: |
          cd config-repo/overlays/${{ env.TARGET_OVERLAY }}
          kustomize edit set image todo-backend=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/todo-backend:${{ env.IMAGE_TAG_NAME }}
          cat kustomization.yaml

      - name: Commit and Push to Config Repository
        run: |
          cd config-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add overlays/${{ env.TARGET_OVERLAY }}/kustomization.yaml
          git commit -m "chore(todo-backend): Update image to ${{ env.IMAGE_TAG_NAME }} in ${{ env.TARGET_OVERLAY }}"
          git push

  build-broadcaster:
    name: Build and Deploy Broadcaster
    needs: detect-changes
    if: needs.detect-changes.outputs.broadcaster == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Determine Image Tag and Target Overlay
        id: tag_vars
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG_NAME="${{ github.ref_name }}"
            TARGET_OVERLAY="prod"
          else
            IMAGE_TAG_NAME="${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-8)"
            TARGET_OVERLAY="staging"
          fi
          echo "IMAGE_TAG_NAME=$IMAGE_TAG_NAME" >> $GITHUB_ENV
          echo "TARGET_OVERLAY=$TARGET_OVERLAY" >> $GITHUB_ENV
          echo "Using tag: $IMAGE_TAG_NAME for $TARGET_OVERLAY"

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: 'Build and Push Broadcaster'
        run: |
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/broadcaster:${{ env.IMAGE_TAG_NAME }}
          docker build --tag $IMAGE_TAG ./broadcaster
          docker push $IMAGE_TAG

      - name: Checkout Config Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONFIG_REPO }}
          token: ${{ secrets.CONFIG_REPO_PAT }}
          path: config-repo

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Update Config Repository with New Image
        run: |
          cd config-repo/overlays/${{ env.TARGET_OVERLAY }}
          kustomize edit set image broadcaster=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/broadcaster:${{ env.IMAGE_TAG_NAME }}
          cat kustomization.yaml

      - name: Commit and Push to Config Repository
        run: |
          cd config-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add overlays/${{ env.TARGET_OVERLAY }}/kustomization.yaml
          git commit -m "chore(broadcaster): Update image to ${{ env.IMAGE_TAG_NAME }} in ${{ env.TARGET_OVERLAY }}"
          git push